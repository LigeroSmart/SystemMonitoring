<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<book lang='en'>

<!-- ************************************** Head *********************************************** -->

<bookinfo>
<title>$Name</title>
<edition>$Description Version $Version</edition>

<copyright>
<year>$YearStamp</year>
<holder>$Vendor, $URL</holder>
</copyright>

<date>$DateStamp</date>

<legalnotice>
    <para>$License</para>
    <para>This work is copyrighted by $Vendor, Norsk-Data-Str. 1, 61352 Bad Homburg, Germany.</para>
    <para>Build Date: $DateStamp</para>
</legalnotice>

</bookinfo>

<!-- ************************************ Customer part ****************************************** -->

<preface id="preface" >
    <!-- ********** -->
    <!-- 1. Preface -->
    <!-- ********** -->
    <title>Preface</title>
    <!--
         A short overview for this module clearly explained to customers!!!
         e.g. Provides an additional button to also insert FAQ richtext incl. inlines + attachments into tickets.
    -->
        <para>
            This module implements a basic interface to System Monitoring Suites. It
            works by receiving email messages sent by a Network Monitoring Suite. New
            tickets are created in case of component failures. Once a ticket has
            been opened messages regarding the effected component are attached to
            this ticket. When the component recovers, the ticket state can be
            changed or the ticket can be closed.
        </para>
        <para>
            If an open ticket for a given Host/Service combination exists, all
            mails concerning this particular combination will be attached to the
            ticket until it's closed.
        </para>
    <para>
        If you have questions regarding this package, please contact your support team
        (support@otrs.com) for more information.
    </para>
</preface>

<chapter>
    <!-- *************** -->
    <!-- 2. Feature List -->
    <!-- *************** -->
    <title>Feature List</title>
    <!--
        List of all functions declared at the functional level
         -   minimum in 4 sentences
         -   customer-specific
         -   possible screenshots
         -   no OTRS terminology like TicketEventModul, PreApplicationModul
    -->
    <sect1>
        <title>Control flow</title>
        <para>
            The following diagram illustrates how mails are handled by this module
            and in which cases they trigger which action. Pretty much all checks are
            configurable using the regular expressions given by the parameters listed
            above.
        </para>
<para><screen><![CDATA[
Mail matches 'FromAddress'?
|
+-> NO  --> Continue with regular mail processing
|
+-> YES --> Does a ticket with matching Host/Service combination
            already exist in OTRS?
            |
            +-> NO  -> Does 'State:' match 'NewTicketRegExp'?
            |          |
            |          +-> NO  -> Stop processing this mail
            |          |          (silent drop)
            |          |
            |          +-> YES -> Create new ticket, record Host
            |                     and Service, attach mail
            |
            +-> YES -> Attach mail to ticket
                    -> Does 'State:' match 'CloseTicketRegExp'?
                        |
                        +-> NO  -> Continue with regular mail processing
                        |
                        +-> YES -> Change ticket type as configured in
                                    'CloseActionState']]>
</screen></para>
        <para>Besides of a few additional sanity checks this is how the
            SystemMonitoring module treats incoming mails. By changing the regular
            expressions it should be possible to adopt it to different monitoring
            systems.
        </para>
    </sect1>
</chapter>

<chapter>
    <!-- ******************** -->
    <!-- 3. System Reqirements -->
    <!-- ******************** -->
    <title>System Requirements</title>
    <sect1>
        <title>Framework</title>
        <para>The following OTRS framework is required:</para>
        <para>
        $Framework
        </para>
    </sect1>
    <sect1>
        <title>Packages</title>
        <para>The following packages are required:</para>
        <para>
        $PackageRequired
        </para>
    </sect1>
    <sect1>
        <title>Operating System</title>
        <para>This package requires one of the following operating systems:</para>
        <para>
        $OS
        </para>
    </sect1>
    <sect1>
        <title>Third Party Software</title>
        <para>This third party software is required to use this package:</para>
        <para>
            <itemizedlist>
                <listitem><para>A network monitoring system, such as Nagios, or HP OpenView, or similar, capable of sending out events via e-mail.</para></listitem>
            </itemizedlist>
        </para>
    </sect1>
</chapter>

<chapter>
    <!-- *************** -->
    <!-- 4. Installation -->
    <!-- *************** -->
    <title>Installation</title>
    <para>The following instructions explain how to install the package.</para>
    <sect1>
        <title>Admin Interface</title>
        <para>
            Please use the following URL to install the package utilizing the admin
            interface (please note that you need to be in the admin group).
        </para>
        <para>
            <ulink url="http://localhost/otrs/index.pl?Action=AdminPackageManager">
                http://localhost/otrs/index.pl?Action=AdminPackageManager
            </ulink>
        </para>
    </sect1>
    <sect1>
        <title>Command Line</title>
        <para>
            Whenever you cannot use the Admin Interface for whatever reason,
            you may use the following command line tool (&quot;bin/otrs.PackageManager.pl&quot;)
            instead.
        </para>
        <para>
        <screen>
            shell> bin/otrs.PackageManager.pl  -a install -p /path/to/$Name-$Version.opm
        </screen>
        </para>
    </sect1>
</chapter>

<chapter>
    <title>Configuration</title>
   <para>
        To allow flexible integration between OTRS and a System Monitoring Suite
        the following configuration options are available. The default values
        (as shown below) should be suitable for a standard Nagios installation.
    </para>
    <sect1>
        <title>Creation of dynamic fields</title>
        <para>
            A requirement to get a working module is to use existing dynamic fields
            for the defined values of FreeTextHost, FreeTextService and FreeTextState.
        </para>
    </sect1>
    <sect1>
        <title>FromAddressRegExp</title>
        <para>
            Only mails matching this "From:" address will be considered for this
            filter. You need to adjust this setting to the from address your
            System Monitoring Suite uses for outgoing mails.
        </para>
        <para>Default: 'sysmon@mysystem.com'</para>
    </sect1>
    <sect1>
        <title>StateRegExp</title>
        <para>Regular Expression to extract the state from the message.</para>
        <para>Default: '\s*State:\s+(\S+)'</para>
    </sect1>
    <sect1>
        <title>NewTicketRegExp</title>
        <para>Regular expression for extracted state to trigger a new ticket</para>
        <para>Default: 'CRITICAL|DOWN'</para>
    </sect1>
    <sect1>
        <title>CloseTicketRegExp</title>
        <para>
            Regular expression for extracted "State" to trigger ticket
            transition to "CloseActionState".
        </para>
        <para>Default: 'OK|UP'</para>
    </sect1>
    <sect1>
        <title>CloseActionState</title>
        <para>
            New status for ticket when service recovers. This can be either
            "OLD" in which case the old status stays, or the name of the new
            status. Please note, that this state needs to be configured in your
            OTRS installation as valid state. If the state you set here does not
            exist, the ticket state will not be altered.
        </para>
        <para>Default: 'closed successful'</para>
    </sect1>
    <sect1>
        <title>ClosePendingTime</title>
        <para>
            Pending time in seconds for 'Pending...' statuses. (Ignored for
            other status types). Please note that this setting will be ignored
            by OTRS versions older than 2.2. On these systems the pending time
            already associated with the ticket will be used, which may have in
            surprising effects. It's recommended not to use 'Pending...' states
            with OTRS prior to 2.2.
        </para>
        <para>Default: '60*60*24*2' (2 days)</para>
    </sect1>
    <sect1>
        <title>HostRegExp</title>
        <para>Regular expression to extract the affected host.</para>
        <para>Default: '\s*Address:\s+(\d+\.\d+\.\d+\.\d+)\s*'</para>
    </sect1>
    <sect1>
        <title>FreeTextHost</title>
        <para>
            A dynamic field (type ticket) to store the affected host.
            The field name has to be named like free text fields (TicketFreeTextField[1..16]) because of downward compatibility.
            Example value: '1' for TicketFreeTextField1.
        </para>
        <para>Default: '1'</para>
    </sect1>
    <sect1>
        <title>ServiceRegExp</title>
        <para>Regular expression to extract the affected service.</para>
        <para>Default: '\s*Service:\s+(.*)\s*'</para>
    </sect1>
    <sect1>
        <title>DefaultService</title>
        <para>
            Default for "Service"; used if no service can be extracted, i.e. if
            host goes DOWN/UP.
        </para>
        <para>Default: 'Host'</para>
    </sect1>
    <sect1>
        <title>FreeTextService</title>
        <para>
            A dynamic field (type ticket) to store the service.
            The field name has to be named like free text fields (TicketFreeTextField[1..16]) because of downward compatibility.
            Example value: '2' for TicketFreeTextField2.
        </para>
        <para>Default: '2'</para>
    </sect1>
    <sect1>
        <title>FreeTextState</title>
        <para>
            A dynamic field (type article) to store the state.
            The field name has to be named like free text fields (ArticleFreeTextField[1..16]) because of downward compatibility.
            Example value: '1' for ArticleFreeTextField1.
        </para>
        <para>Default: '1'</para>
    </sect1>
    <sect1>
        <title>SenderType</title>
        <para>Sender type used for creating tickets and attaching notes.</para>
        <para>Default: 'system'</para>
    </sect1>
    <sect1>
        <title>ArticleType</title>
        <para>Article type used to attach follow up emails to existing tickets.</para>
        <para>Default: 'note-report'</para>
    </sect1>
    <sect1>
        <title>Integration with OTRS Configuration Management</title>
        <para>
            If the OTRS::ITSM Configuration Management module is installed and
            the configuration option 'SystemMonitoring::SetIncidentState' is set
            to 'Yes', a CI with the given host name is searched in the CI database.
            If exactly one CI with this name was found, the current incident state is set
            automatically according to the incoming mail (Incident / Operational).

            If the OTRS::ITSM Configuration Management module is installed and
            the configuration option 'SystemMonitoring::LinkTicketWithCI' is set
            to 'Yes', a CI is linked automatically with the system monitoring
            incident ticket. This is only possible if a subsequent system monitoring
            email arrives!
        </para>
    </sect1>

</chapter>

<chapter>
    <!-- ******** -->
    <!-- 6. Usage -->
    <!-- ******** -->
    <title>Usage</title>
    <!--
        Create for every "possible" use case a step by step list clearly explained to customers. Screenshots desirable-
        e.g.
        1.  Choose new phone ticket frontend ?
        2.  Fillup required data (subject)
        3.  Submit the data (have a look at screenshot)
        ...
    -->

    <sect1>
        <title>Title</title>
        <para>
            Details.
        </para>
    </sect1>
</chapter>

<!-- ***************************************** Technical part ************************************ -->

<chapter>
    <!-- ********************************* -->
    <!-- 7. Technical Implematation Detail -->
    <!-- ********************************* -->
    <title>Technical Implementation Details</title>
    <!--
        Describe the technical structure of the module and the technical functioning out of a developer's perspective.
            -   Which module layers are used where/as?
            -   What are the technical features of it?
        You can split the technical part into a customer part shown in the doku
        and a hidden part shown in the code.
    -->
    <para>
        Technical Implementation Details.
    </para>
</chapter>

<chapter>
    <!-- *********** -->
    <!-- 8. Filelist -->
    <!-- *********** -->
    <title>Filelist</title>
    <!-- Standard text. Don't change this -->
    <para>This list shows all included files and the referring permissions.</para>
    <para>
       $Filelist
    </para>
</chapter>

<chapter>
    <!-- ************* -->
    <!-- 10. Changelog -->
    <!-- ************* -->
    <title>ChangeLog</title>
    <para>
    $ChangeLog
    </para>
</chapter>

<chapter>
    <!-- ************ -->
    <!-- 11. Contacts -->
    <!-- ************ -->
    <title>Contacts</title>
    <para>People who are involved in this implementation.</para>
    <sect1>
        <title>OTRS AG</title>
        <para>
            Accounting: René Bakker &lt;sales@otrs.com&gt;, Phone +49 (0)6172 681988 0
        </para>
        <para>
            Technical: Manuel Hecht, Oliver Roettges &lt;dev-support@otrs.com&gt;, Phone +49 (0)6172 681988 0
        </para>
    </sect1>
</chapter>


</book>
